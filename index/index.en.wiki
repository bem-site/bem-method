Usually the website development process is based on the assumption
that design and technical requirements will not change.

A designer, a front-end developer and a programmer work each in their field, often
without interfering each other:
  1. A designer creates a site design in the form of design layout
  2. Front-end developer create static HTML/CSS pages based on the design layout
  3. Programmer creates templates from these static pages and then writes some JavaScript

Such an approach works well only if the design remains the same
for all the lifetime of the site. Alas, usually that's not the case. 
The design keeps evolving, new blocks and pages are being added.

If the source code layout and development process don't follow a strict set of rules, it gradually becomes more and more
problematic to work efficiently.

In a BEM-methodology all people taking part in the development of a website are working
with a single codebase and are using the same terms of communication, the same language:
  1. Design of the website can change at any time, we should be ready for it
  2. HTML/CSS code is developed along with the design, ready for its changes
  3. Back-end and front-end developers are working together on the same codebase,
     contributing to each other's code

=== The conditions of the methodology emergence
BEM-methodology was developed at ((http://company.yandex.com Yandex)) 
while workig on a large number of web services, and is aimed to achieve following:

 * Fast-to-develop, long-lived projects\\
   It should be possible to develop and launch the first version of a website quickly with an
   architecture that helps to maintain it in the long run.
 * Team scalability\\
   Adding new people to a product team should improve speed, not decrease it. We need to be
   able to assign new members to a team without a steep learning curve.\\
   Code should be well-structured for a project to remain maintainable over time and
   team changes.
 * Code reuse\\
   To maintain UI consistency and minimize development effort on typical interface
   components, those components have to be easily reusable.
   The source code should not have contextual dependency on the other code, it should be
   easy to move that code to another place.

For years we kept looking for solutions to our problems, and at one point they became ##BEM methodology##.

=== Read more
  * ((definitions/ Definitions))
  * ((filesystem/ Filesystem organization))
  * ((history/ History))

