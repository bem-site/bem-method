== БЭМ-метод

=== Задачи

  * разделять код на логические части
    * разделять ответственность, части кода могут писаться разными людьми
    * повторно использовать: чем больше частей у нашего решения, тем больше вероятность того, что часть решения может быть использована в другом проекте
    * использовать без погружения в детали реализации: оперировать частями без погружения в то, как эти части сделаны
  * "многоязычный" код
    * в веб-технологиях, html+css+js: финальный продукт состоит из разных технологий, но при этом во всех технологиях единые термины и подходы к реализации
    * картинки блока или, например, фотошопные макеты это тоже технологии
    * документация к блоку это тоже технология
  * оптимизировать выполнение production runtime, добавлять в него только действительно используемые части, не грузить лишний, не используемый код

=== Метод

  * Блоки
    * представлены в нескольких технологиях
    * технологии "вторичны", структура блока первична
    * могут быть глобальные блоки, влияющие на весь run-time какой-то технологии
    * могут быть зависимости между блоками
  * Элементы блока
    * опциональная часть блока
  * Модификаторы блока и элемента
    * опциональная кастомизация блока или элемента
    * возможно использование нескольких модификаторов и их значений в одном рантайме
  * Уровни переопределения
    * кастомизации всего рантайма
  * Данные блока и элемента
    * неформализованная вариативность блока
  * Собранный "рантайм"
    * набор файлов содержащий всё нужное для определённого случая

=== Вариант реализации

  * Блоки
    * представляются папками по имени блока
    * в папке блока лежат файлы (и возможно папки) по технологиям реализации
  * Элементы блока
    * представляются папками с префиксом "__" внутри папки блока
    * в папке элемента лежат файлы (и возможно папки) по технологиям реализации
  * Модификаторы
    * представляются папками с префиксом "_" внутри папки блока или элемента
    * в папке модификатора лежат файлы (и возможно папки) по технологиям реализации
  * Зависимости описываются в специальном файле *.require
  * Уровни переопределения представляются набором папок с определённым порядком, в которых хранятся описания блоков
  * Данные блока никак не формализованны
  * Использование блоков зависит от "корневой" технологии
