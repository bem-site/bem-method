=== BEM technologies

BEM blocks are usually implemented using multiple technologies.

%%html
    <img src="/bem-method/images/levels.tech.png"/>
%%

==== HTML

Two different approaches to HTML markup are possible:

http://clubs.ya.ru/bem/replies.xml?item_no=712

===== Using HTML tags and CSS classes

Each BEM entity is defined by an HTML tag and corresponding CSS classes.

%%hl xml
    <div class="block-name">
        <i class="block-name__elem"></i>
        ...
    </div>
    <div class="block-name block-name_modifier">...</div>
%%

===== Custom HTML tags

Making one step further, we can partially replace standard HTML tags with custom ones.

%%hl xml
    <copyright>
        <copyright-elem>...</copyright-elem>
        ...
    </copyright>
    <copyright class="block-name_modifier">...</copyright>
%%

==== CSS

Each BEM entity must have a CSS class to allow modification.

As blocks are inherently non-unique and can be reused, only CSS classes are allowed, not IDs.

**Important**: ID-based CSS selectors are *NOT ALLOWED*:
%%hl xml
    #header {}
%%

The naming of CSS classes of BEM entities must follow the [naming conventions](#naming)

**Examples of naming**

%%hl xml
 .b-popup {}                 // CSS class of a block
 .b-popup__content {}        // CSS class of an element
 .b-popupa_theme_yellow {}   // CSS class of a modifier
%%

Usage of ((http://h.yandex.net/?http%3A%2F%2Fwww.w3.org%2FTR%2F2001%2FCR-css3-selectors-20011113%2F%23type-selectors type selectors)) is allowed but actively discouraged.

**Examples of non-recommended selectors**:

%%hl xml
    p
    {
    	color: #ccc;
    }

    table.news td
    {
    	border-bottom: 1px solid #ccc;
    }

    .list li
    {
    	float: left;
    }
%%

Avoiding of type selectors significantly improves page rendering performance, known as ##Reflow Time## â€” time spent by the browser during application of a stylesheet to a ##DOM## tree.\\ ((http://clubs.ya.ru/bem/replies.xml?item_no=712 More information is provided in this blog post (in Russian)))

==== JavaScript

JavaScript code can also be written in BEM terms - for example, instead of working with CSS classes directly, we can add, remove, or test for blocks, elements, modifiers. The exact ##DOM## representation is treated as a low-level implementation detail.\\
Blocks without a DOM representation are allowed as well - they usually provide helper functionality.

**Examples of blocks without a DOM representation:**

%%hl xml
    i-request                // Generic request generator
    i-request_type_ajax      // Ajax request generator
%%

A client-side JS framework called ##i-bem## is provided as part of the ##bem-bl## library:

 * ((https://github.com/bem/bem-bl/tree/master/blocks-desktop/i-bem i-bem on GitHub))
 * ((https://github.com/bem/bem-bl/ bem-bl block library)).
 * ((http://clubs.ya.ru/bem/replies.xml?item_no=900 Talk on i-bem.js by Dmitry Filatov and Sergey Berezhnoy (in Russian)))

==== Templates

Blocks can be implemented using templates, which use some input data to build HTML.

The ##bem-bl## library uses ##bemhtml## as a templating mechanism.

bemhtml is a superset of the xjst templater. Templates written in bemhtml are compiled down to plain JavaScript and can be executed both in server- and client-side environments.

 * ((http://clubs.ya.ru/bem/replies.xml?item_no=898 Talk on bemhtml by Sergey Berezhnoy (in Russian)))
 * ((http://clubs.ya.ru/bem/replies.xml?item_no=899 Talk on xjst  by Andrey Mischenko and Sergey Berezhnoy (in Russian)))
