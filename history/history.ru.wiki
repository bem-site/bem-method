== История создания БЭМ
Однажды, в далёкой-далёкой стране, компания Яндекс начала разрабатывать поиск по Интернету и сопутствующие сервисы.
Время шло, сервисы развивались и всё больше разработчиков интерфейсов вкладывали свои усилия в развитие Яндекса.

Они делали отличные сервисы и инструменты, облегчающие им жизнь, и вот пришло время поделиться этими наработками с комьюнити и помочь другим разработчикам сделать их работу проще.

Вы прочитаете о том, как разработчики интерфейсов Яндекса постоянно пересматривали и улучшали способ создания веб-страниц.
Разработчики интерфейсов отличаются своей огромной любознательностью, которая зачастую бывает инновационна, и своей ленью, которая мотивирует их на создание сложных систем, которые должны экономить время разработчика, унифицировать и автоматизировать процессы.

Для начала, давайте отмотаем время назад, в 2005 год, и заглянем через плечо ужасно занятого разработчика Яндекса...

=== …как всё начиналось
В 2005 году фокус был в основном на серверной части сервисов. С точки зрения интерфейса, типичный проект Яндекса был набором
статических HTML страниц, которые использовались как основа для создания шаблонов на XSL

Эти HTML странички хранились в отдельной директории примерно в такой структуре:

%%hl xml
about.html
index.html
…
project.css
project.js
i/
    yandex.png
%%

Для каждой страницы создавался отдельный HTML файл. Стили для них складывались в один файл на весь проект —
##project.css##, скрипты — в ##project.js##.

В то время JavaScript использовался, как вспомогательный инструмет для оживления страницы и всё помещалось
в небольшой файл.

Картинки складывались в отдельную директорию, их было много. В те времена ещё была поддержка MSIE5 и не было
поддержки CSS3 в браузерах, картинки использовались для любого оформления, даже для закруглённых уголков. :-)

Все стили были в одном файле и для отделения стилей разных частей страницы использовались комментарии
с указанием начала и конца:

%%hl css
/* Content container (begin) */
    #body
    {
        font: 0.8em Arial, sans-serif;

        margin: 0.5em 1.95% 0.5em 2%;
    }
/* Content container (end) */

/* Graphical banner (begin) */
    .banner
    {
        text-align: center;
    }

    .banner a
    {
        text-decoration: none;
    }
/* Graphical banner (end) */
%%

В вёрстке использовались как id, так и классы.

Свёрстанные статические HTML-странички нарезались в XSL-шаблоны, которые
использовались в продакшене. Если HTML изменялся, все правки вручную
переносиись в XSL. И наоборот: изменения в шаблонах несли с собой изменения в HTML
для поддержания статического HTML в актуальном состоянии.

Это было сложно, и даже когда это не было сложно — это было тупо.

=== Проекты побольше
При вёрстке первой версии Яндекс.Музыки в начале 2006 стало понятно,
что для проекта с большим количеством разных страниц этот подход работает плохо.

Тяжело подбирать названия классам, сложно держать в голове код всего проекта
и писать так, чтобы изменения на одной странице ничего не ломали на другой.

Типичный код того времени:

%%hl css
    /* Albums (begin) */
        .result .albums .info
        {
            padding-right: 8.5em;
        }

        .result .albums .title
        {
            float: left;
            padding-bottom: 0.3em;
        }

        .result .albums .album .listen
        {
            float: left;
            padding: 0.3em 1em 0 1em;
        }

        .result .albums .album .buy
        {
            float: left;
            padding: 0.4em 1em 0 1.6em;
        }

        .result .albums .info i
        {
            font-size: 85%;
        }
    /* Albums (end) */
%%

Здесь используется длинный каскад.

Или вот ещё пример.

%%hl css
    /* Картинки на фоне (begin) */
        #foot div
        {
            height: 71px;
            background: transparent url(../i/foot-1.png) 4% 50% no-repeat;
        }

        #foot div div
        {
            background-position: 21%;
            background-image: url(../i/foot-2.png);
        }

        #foot div div div
        {
            background-position: 38%;
            background-image: url(../i/foot-3.png);
        }

        #foot div div div div
        {
            background-position: 54%;
            background-image: url(../i/foot-4.png);
        }

        #foot div div div div div
        {
            background-position: 71%;
            background-image: url(../i/foot-5.png);
        }

        #foot div div div div div div
        {
            background-position: 87%;
            background-image: url(../i/foot-6.png);
        }
    /* Картинки на фоне (end) */
%%

Тут используются ##id## и тэги.

Одновременно с Музыкой началась вёрстка ((http://wow.yandex.ru Яру)).

Это проект с десятками страниц и такой подход не работает — вёрстка становится неуправляемой.

==== Появление блоков
TRANSLATE: We needed to specify a data domain for managing page interface objects. This was a methodology thing,
we needed to put more clarity into the way we work with concepts like
##class##, ##tag##, ##visual component## etc.

TRANSLATE: For a typical web page of a Yandex project, HTML structure and its CSS styles were still the focus of
our development efforts, and JavaScript was understood as a supplementary technology.

TRANSLATE: For easier maintenance of HTML/CSS for many different components, a new term was invented: ##block##.
Block is a part of a page design or layout having its specific and unique meaning defined either
semantically, or visually.

TRANSLATE: In most cases, any distinct page element (either complex or simple) may be seen as a block.
Then its HTML container gets a unique CSS class, which is also used as a block name.

Классы блоков получили префиксы (##b-##, ##c-##, ##g-##), чтобы отличаться от классов внутри.

Используемые префиксы, с которых мы начинали:
 * **b-**  block\\
   независимый блок, может использоваться в любом месте страницы
 * **с-**  control\\
   контрол (независимый блок) с которым ассоциирован JavaScript объект, обеспечивающий его
   функциональность, может использоваться в любом месте страницы
 * **g-**  global\\
   глобальное определение, используется по необходимости, количество сведено к минимуму

Кроме префиксов были постфиксы:
 * **-nojs**   no javascript\\
   стиль применяется в отсутствие javascript. Если javascript включен, то при загрузке страницы
   вызывается метод ##init()## в onload для удаления этого постфикса из всех классов на странице,
   что «включает» JavaScript для этих блоков.

==== Появление элементов
==== What's Inside?
TRANSLATE: In an HTML container forming a block, some nodes get a distinct CSS classname. This not only facilitates the creation of tagname-independent style rules, but also assigns semantically meaningful roles to each node. Such inner nodes are called "block elements", or simply "elements".

TRANSLATE: The core distinction between a block and an element is the element's inability to exist out of its parent block's context. As long as you cannot detach something from a block, it's an element; detachable elements (probably) should become blocks themselves.

TRANSLATE: At first, elements could have been defined only inside their parent block's container; later, a technique was provided to place some elements outside and still keep a block consistent.

Элементы, у которых много кода, выделялись комментариями.

%%hl css
    /* Head (begin) */
        .b-head { … }

        /* Logo (begin) */
            .b-head .logo { … }
            .b-head .logo a { … }
        /* Logo (end) */

        /* Right side (begin) */
        .b-head .right { … }

            /* Info (begin) */
                .b-head .info { … }
                .b-head .info .exit a { … }
            /* Info (end) */

            /* Search (begin) */
                .b-head .search { … }
                .b-head .search div div, .b-head .search div div i { … }
            /* Search (end) */
        /* Right side (end) */
    /* Head (end) */
%%

==== Структура вёрстки проекта
В Яндексе разработчики интерфейсов обычно поддерживают несколько проектов одновременно.

Переключение между разными репозиториями и ветками в них легче, если все проекты имеют
одинаковую (или очень похожую) файловую структуру.

TRANSLATE: Granularity is another requirement as it providesmore flexibility for version control systems
and helps avoid conflicts during concurrent development.

Это привело нас к унификации структуры репозитория разных проектов.

CSS, JavaScript и картинки начали складывать в отдельные директории.

JavaScript начал применяться всё больше, начали подключаться дополнительные компоненты и библиотеки.

Типичная структура вёрстки проекта:

%%hl xml
index.html
css/
    yaru.css
    yaru-ie.css
js/
    yaru.js
i/
    yandex.png
%%

Валидные хаки для MSIE писали в основном CSS-файле ##yaru.css##.

%%hl css
    /* Common definitions (begin) */
        body
        {
            font: 0.8em Arial, sans-serif;

            padding: 0 0 2em 0;
            background: #fff;
        }

        * html body
        {
            font-size: 80%;
        }
%%

Невалидные — в файле ##yaru-ie.css##.

%%hl css
    /* Common blocks (begin) */
        /* Artist (begin) */
            .b-artist .i i
            {
                top: expression(7 + (90 - this.parentNode.getElementsByTagName('img')[0].height)/2);
                filter:progid:DXImageTransform.Microsoft.AlphaImageLoader(src='../i/sticker-lt.png', sizingMethod='crop');
            }
%%

=== Зачатки общепортального фреймворка
При верстке нескольких проектов с похожим дизайном есть общие блоки.

Портал Яндекса содержит сейчас больше 100 разных сервисов в одном стиле и бездумный copy/paste с проекта
на проект не работает на таком объёме.

Так появилось общее хранилище повторно используемых компонент, которое называлось «общая библиотека
блоков» или просто «Common».

Первые блоки, которые были туда вынесены — шапка, подвал и стили для статического текста.

Соответствующие файлы хранились на выделенном внутреннем сервере разработчиков (**common.cloudkill.yandex.ru** в примере ниже).

Это было самое начало нашего общепортального фреймворка.

Cтили с него подключались в основной проектный файл с помощью импортов непосредственно с сервера:

%%hl css
@import url(http://common.cloudkill.yandex.ru/css/global.css);
@import url(http://common.cloudkill.yandex.ru/css/head/common.css);
@import url(http://common.cloudkill.yandex.ru/css/static-text.css);
@import url(http://common.cloudkill.yandex.ru/css/foot/common-absolute.css);
@import url(http://common.cloudkill.yandex.ru/css/foot/common-absolute-4-columns.css);
@import url(http://common.cloudkill.yandex.ru/css/list/hlist.css);
@import url(http://common.cloudkill.yandex.ru/css/list/hlist-middot.css);
@import url(http://common.cloudkill.yandex.ru/css/dropdown/dropdown.css);
@import url(http://common.cloudkill.yandex.ru/css/dropdown/dropdown-arrow.css);
@import url(slider.css);

/* Header (begin) */
    /* Service (begin) */
        .b-head .service h1 { … }
        .b-head .service h1, .b-head .service h1 a, .b-head .service h1 b { … }
%%

Слишком много импортов, страница загружается медленно! И мы решили прекомпилировать стили (и позже JS файла)
перед выкладкой в продакшен.

Компиляция заменяет ##@import## на содержимое внешних файлов (это называется ##inlining##) и делает другие оптимизации,
например, убирает ненужные браузеру пробелы и комментарии.

Наш внутренний инструмент вырост из простого perl скрипта в отдельный open source проект ((https://github.com/veged/borschik borschik)).
Попробуйте его в своём проекте!

=== Вёрстка независимыми блоками
К осени 2007 года правила вёрстки уже устоялись, и о них захотелось рассказать вне Яндекса.

На ClientSide'2007 был сделан доклад про
«((http://vitaly.harisov.name/article/independent-blocks.html вёрстку независимыми блоками))»,
которая на тот момент составляла основу наших HTML-страниц.

В докладе вводится понятие ##Блок##:
%%html
<blockquote>Блоком будем называть фрагмент страницы, который описывается своей разметкой и стилями.</blockquote>
%%

Более позднее описание в клубе БЭМ: ((http://clubs.ya.ru/bem/replies.xml?item_no=42))

==== Правила блоков
Формулируются правила независимости блока:
  1. для описания элемента используется ##class##, но не ##id##
  1. каждый блок имеет префикс
  1. в таблице стилей нет классов вне блоков

Отказ от id даёт возможность использовать один и тот же блок несколько раз на
странице. А также позволяет использовать на одном DOM-узле несколько классов, что
в дальнейшем нам пригодилось.

===== Простые и составные блоки
Блоки делятся на простые и составные.

%%html
<blockquote>В простые блоки нельзя вкладывать другие блоки, в составные — можно.</blockquote>
%%

Это было очень наивное деление, мы неоднократно сталкивались с тем, что даже в самые простые блоки
вкладывались другие и приходилось переделывать вёрстку.

Такая классификация фактически мешала нам во многих случаях и мы в итоге пришли противоположному принципу:
любой блок должен позволять вкладывать в него другой блок, когда это возможно.

===== Правила полной независимости блоков
CSS не является пуленепробиваемым, когда смешиваются стили из разных источников на одной странице.

В сложных случаях, блоки могут вредить отображению друг друга из-за конфликта имён элементов.
Стили, опирающиеся на имена тэгов могут захватывать больше элементов, чем было задумано.

Намучавшись с подобными ошибками, мы сформулировали правила более строгой независимости блоков,
которые назвали ((clubs.ya.ru/bem/replies.xml?item_no=43 абсолютно-независимые блоки)) (сокращённо АНБ):

  1. никогда не опираться на элементы, только на классы:\\
     ##.b-user b -> .b-user .first-letter##
  2. всем классам внутри блока давать имена начинающиеся с имени этого блока:\\
     ##.b-user .first-letter -> .b-user-first_letter##

Но класс у каждого DOM-узла существенно увеличивает HTML-код.

На тот момент мы считали, что это дорого и применяли такой подход в исключительных случаях.

===== Префиксы
Как все знают, в программировании одна из самых сложных проблем — подбирать имена переменным. :-)

TRANSLATE: We approached it cautiously и придумали, что будем давать блокам разные префиксы, каждый со своей семантикой:

  * **b-**\\
    обычные блоки
  * **h-**\\
    обёртки, используется для оборачивания нескольких блоков
  * **l-**\\
    раскладки
  * **g-**\\
    глобальные стили

===== Модификация
Модификация может быть определена, как особое состояние блока или как метка, несущая определённое свойство.

Лучше всего это показать на примере: блок Кнопка может иметь три состояния: маленькая, нормальная и большая.

Вместо того, чтобы создавать три разных блока, делается модификация одного. Она состоит из имени (например, ##size##)
и значения (##small##, ##normal## или ##big##).

У блока есть две причины для модификации:
  1. Блок может изменить свой внешний вид в зависимости от того, где он находится.\\
     Это модификация от контекста.
  1. Можно добавить блоку второй класс, это модификация постфиксом, она не зависит от контекста.\\
     ##class="b-block b-block-postfix"##

=== Общепортальный фреймворк
Весной 2008 года была поставлена задача сделать брендбук, описывающий наш портальный стиль.

Я начал с того, что умел лучше всего — делать HTML/CSS код.

Если делать просто описание — оно устареет, не успев дописаться до конца.

Проект получил название ##Лего##.

==== Структура репозитория Лего
Первичное разделение на верхнем уровне репозитория идёт по технологиям.

%%hl xml
css/
html/
js/
xml/
xsl/
%%

В каждой технологии своя структура.

CSS раскладывается в три разные директории:

%%hl xml
css/
    block/
        b-dropdown/
            b-dropdown.css
    service/
        auto/
            block/
                b-head-logo-auto.css
            head.css
    util/
        b-hmenu/
            b-hmenu.css
%%

 1. block — общепортальные блоки
 1. util — блоки, которые имеют смысл вне Яндекса, их можно выложить в OpenSource
 1. service — стили для конкретных сервисов Яндекса, подключив их на сервис можно отобразить шапку, подвал

Структура директории html аналогична css.

%%hl xml
html/
    block/
        b-dropdown.html
    service/
        auto/
            l-head.html
    util/
        b-hmenu.html
%%

JS находится в зачаточном состоянии:

%%hl xml
js/
    check-is-frame.js
    check-session.js
    clean-on-focus.js
    dropdown.js
    event.add.js
    event.del.js
%%

У каждого сервиса есть XML-файл, использующийся для построения шапки.

%%hl xml
xml/
    block/
        b-head-tabs-communication.xml
        common-services.ru.xml
        head-messages.ru.xml
    service/
        auto/
            head.xml
%%

XSL блоков лежит в одной директории:

%%hl xml
xsl/
    block/
        b-dropdown.xsl
        b-head-line.xsl
        i-common.xsl
        i-locale.xsl
        l-foot.xsl
        l-head.xsl
%%

Каждому блоку соответствует один файл.

Подключение Лего на проекты делалось через svn:externals.

При сборке для продакшена, код библиотеки полностью включается в проект,
что можно сравнить со статической линковкой.

Такой подход позволяет выпускать версии сервисов с разными версиями Лего
и переходить на новую версию, когда это удобно команде проекта.

Мы используем его до сих пор.

===== Файлы страниц
Файлы, подключавшиеся на страницах, состояли из @import'ов реализации блоков.

%%hl css
@import url(../../block/l-head/l-head.css);
@import url(../../block/b-head-logo/b-head-logo.css);
@import url(../../block/b-head-logo/b-head-logo_name.css);
@import url(block/b-head-logo-auto.css);
%%

Эти import’ы писались вручную.

Именование файлов ещё не устоялось, мы пробуем разные варианты.

=== Общепортальный фреймворк: Лего 1.2 (2008)
Чуть позже в рамках версии 1.2 был сделан рефакторинг и структура Лего изменилась.

%%hl xml
common/
    css/
    js/
    xml/
    xsl/
example/
    html/
service/
    auto/
        css/
        xml/
%%

Убрано разделение на util и block, весь общий CSS лежит в common/css.

От идеи выноса кода в Open Source на тот момент отказались. Вернулись к ней только через два года.

%%hl xml
common/
    css/
        b-dropdown/
            arr/
                b-dropdown.arr.css
                b-dropdown.arr.ie.css
                b-dropdown.css
                b-dropdown.ie.css
%%

Файлы для MSIE переименованы, было -ie.css, стало .ie.css.
Расширения у файлов теперь могут быть из нескольких слов.

Всё что было в опциональном CSS (файлах ##b-dropdown_arr.css##)
вынесено в директории (##arr/b-dropdown.arr.css##).

В основном файле блока стало меньше кода.

Для модификации постфиксом вместо минуса начали использовать подчёркивание.

Это позволило визуально отделить имя блока от модификатора, что
потом пригодилось при реализации инструментов, помогающих работать с кодом.

=== БЭМ
В марте 2009 выходит версия Лего 2.0.

Этим событием заканчивается «Вёрстка независимыми блоками» и начинается «БЭМ».

BEM stands for Block, Element, Modifier; these are three key entities we use to develop web components.

==== Лего 2.0, 2009
Что же принципиально изменилось с выходом версии 2.0?

Самое главное изменение — мы вывели вперёд блоки, а не технологии.
Блоки стали первичны, а технологии их реализации — вторичны.

Реализация блока делалась в отдельной директории, а технологии —
это файлы внутри неё. В том числе появилась документация к блоку — это файл
##.wiki## внутри блока.

Какими терминами мы тогда оперировали?

===== Терминология
##Независимый блок##, который может быть использован в любом месте страницы.

В XML он представлен тегом в неймспейсе ##lego##:

%%hl xml
<lego:l-head>
<lego:b-head-logo>
%%

В HTML класс у блока, такой же, как имя этого тега:

%%hl xml
<table class="l-head">
<div class="b-head-logo">
%%

CSS:

%%hl xml
.l-head
.b-head-logo
%%

Все файлы (css, js, html, xsl), относящиеся к блоку, кладутся в его директорию:

%%hl xml
    common/
        block/
            b-head-logo/
                b-head-logo.css
                b-head-logo.xsl
                b-head-logo.js
                b-head-logo.wiki
%%

Элементы в XML пишутся в неймспейсе lego без префикса:

%%hl xml
<lego:b-head-logo>
    <lego:name/>
</lego:b-head-logo>
%%

Класс в HTML — тоже без префикса.

%%hl xml
<div class="b-head-logo">
    <span class="name">Авто</span>
</div>

.b-head-logo .name { ... }
%%

Файлы для вложенного элемента кладутся в отдельную директорию.

%%hl xml
common/
    block/
        b-head-logo/
            name/
                b-head-logo.name.css
                b-head-logo.name.png
                b-head-logo.name.wiki
%%

Модификаторы в XML представлены атрибутами в неймспейсе lego:

%%hl xml
<lego:b-head-tabs lego:theme="grey">
%%

В HTML используется дополнительный класс.

%%hl xml
<div class="b-head-tabs b-head-tabs_grey">

.b-head-tabs_grey { ... }
%%

Файлы для модификатора кладутся в отдельную директорию, с
подчёркиванием в начале имени:

%%hl xml
common/
    block/
        b-head-logo/
            _theme/
                b-head-logo_gray.css
                b-head-logo_gray.png
                b-head-logo_gray.wiki
%%

===== Декларация используемых блоков
Все лего-компоненты проекта описываются в XML-файле.

%%hl xml
<lego:page>
    <lego:l-head>
        <lego:b-head-logo>
            <lego:name/>
        </lego:b-head-logo>

        <lego:b-head-tabs type="search-and-content"/>
%%

Из него генерируются CSS-файлы.

%%hl css
@import url(../../common/block/global/_type/global_reset.css);
@import url(../../common/block/l-head/l-head.css);
@import url(../../common/block/b-head-logo/b-head-logo.css);
@import url(../../common/block/b-head-logo/name/b-head-logo.name.css);
@import url(../../common/block/b-head-tabs/b-head-tabs.css);
@import url(../../common/block/b-dropdown/b-dropdown.css);
@import url(../../common/block/b-dropdown/text/b-dropdown.text.css);
@import url(../../common/block/b-pseudo-link/b-pseudo-link.css);
@import url(../../common/block/b-dropdown/arrow/b-dropdown.arrow.css);
@import url(../../common/block/b-head-search/b-head-search.css);
@import url(../../common/block/b-head-search/arrow/b-head-search.arrow.css);
@import url(../../common/block/b-search/b-search.css);
@import url(../../common/block/b-search/input/b-search.input.css);
@import url(../../common/block/b-search/sample/b-search.sample.css);
@import url(../../common/block/b-search/precise/b-search.precise.css);
@import url(../../common/block/b-search/button/b-search.button.css);
@import url(../../common/block/b-head-userinfo/b-head-userinfo.css);
@import url(../../common/block/b-head-userinfo/user/b-head-userinfo.user.css);
@import url(../../common/block/b-user/b-user.css);
@import url(../../common/block/b-head-userinfo/service/b-head-userinfo.service.css);
@import url(../../common/block/b-head-userinfo/setup/b-head-userinfo.setup.css);
@import url(../../common/block/b-head-userinfo/region/b-head-userinfo.region.css);
@import url(block/b-head-logo/b-head-logo.css);
@import url(block/b-head-search/b-head-search.css);
%%

Из этого файла видно, что сначала идёт общий код,
а потом добавляются стили, чтобы привести лего-блоки к дизайну проекта.

Имена файлов элементов пишутся через точку: ##b-head-logo.name.css##

Из XML-декларации генерируются и JS-файлы.

%%hl js
include("../../common/block/i-locale/i-locale.js");
include("../../common/block/b-dropdown/b-dropdown.js");
include("../../common/block/b-search/sample/b-search.sample.js");
include("../../common/block/b-head-userinfo/user/b-head-userinfo.user.js");
%%

А также XSL-файлы.

%%hl xml
<?xml version="1.0" encoding="utf-8"?>
<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform" version="1.0">

<xsl:import href="../../common/block/i-common/i-common.xsl"/>
<xsl:import href="../../common/block/i-items/i-items.xsl"/>
<xsl:import href="../../common/block/l-head/l-head.xsl"/>
<xsl:import href="../../common/block/b-head-logo/b-head-logo.xsl"/>
<xsl:import href="../../common/block/b-head-logo/name/b-head-logo.name.xsl"/>
<xsl:import href="../../common/block/b-head-tabs/b-head-tabs.xsl"/>
<xsl:import href="../../common/block/b-dropdown/b-dropdown.xsl"/>
<xsl:import href="../../common/block/b-pseudo-link/b-pseudo-link.xsl"/>
<xsl:import href="../../common/block/b-head-search/b-head-search.xsl"/>
<xsl:import href="../../common/block/b-search/b-search.xsl"/>
<xsl:import href="../../common/block/b-search/input/b-search.input.xsl"/>
<xsl:import href="../../common/block/b-search/sample/b-search.sample.xsl"/>
<xsl:import href="../../common/block/b-search/precise/b-search.precise.xsl"/>
<xsl:import href="../../common/block/b-search/button/b-search.button.xsl"/>
<xsl:import href="../../common/block/b-head-userinfo/b-head-userinfo.xsl"/>
<xsl:import href="../../common/block/b-user/b-user.xsl"/>
<xsl:import href="../../common/block/b-head-userinfo/service/b-head-userinfo.service.xsl"/>
<xsl:import href="../../common/block/b-head-userinfo/setup/b-head-userinfo.setup.xsl"/>
<xsl:import href="../../common/block/b-head-userinfo/region/b-head-userinfo.region.xsl"/>

</xsl:stylesheet>
%%

Мы перестали писать эти файлы руками, началась генерация кода.

==== Скорость селекторов, 2009
При реализации новой версии Яндекс.Почты была задача сделать
её такой быстрой как программа на компьютере.

При решении этой задачи начали использовать XSL в браузере (и
подгружать по сети XML, необходимый для отрисовки данных на странице)
и столкнулись с проблемой, что трансформации отрабатывают быстро,
но вставка в DOM полученного результата происходит очень медленно.
При этом, если отключить CSS — всё происходит быстро.

Начали исследовать эту проблему и пришли к тому, что тормозят селекторы
CSS, которые при большом DOM-дереве и большой таблице стилей оказывают
существенное влияние на скорость отрисовки браузером страницы.

Результаты исследования подробно описаны в статье
((http://clubs.ya.ru/bem/replies.xml?item_no=338)).

Мы поняли, что решение этой проблемы у нас есть давно — это
((http://clubs.ya.ru/bem/replies.xml?item_no=338 абсолютно-независимые блоки)).

Мы переделали все блоки в Лего на АНБ нотацию и с тех пор пишем блоки так, чтобы
у каждого DOM-узла был свой class (на который можно навесить стили) и не
используемся Tag Rules в CSS.

В классы элементов вносится имя блока, селекторы получаются простыми и быстрыми.

%%hl xml
<div class="b-head-logo">
    <span class="b-head-logo__name">
        Авто
    </span>
</div>
%%

==== Стабилизация нотации
Постепенно мы пришли к тому, что нотация в коде и структура на файловой
системе устоялась и с тех пор уже не меняется.

В именах файлов разделитель . был заменён на __. Было ##b-block.elem.css##,
стало ##b-block__elem.css##. Теперь они совпадают с CSS-селекторами.

Были реализованы модификаторы у элементов по аналогии с модификаторами блоков.
##.b-block__elem_theme_green## по аналогии с ##.b-block_theme_green##.

В имя файла модификатора и в его класс внесён тип модификатора.
Было ##.b-menu__item_current##, стало ##.b-menu__item_state_current##.

Причина этого изменения — работа с модификаторами из JS.

=== Open Source (2010)
В 2010 году мы создали организацию ((https://github.com/bem bem на github’е)),
чтобы вести разработку в open source.

==== Библиотека bem-bl
Мы начали выносить блоки из Лего в ((https://github.com/bem/bem-bl bem-bl)),
проводя одновременно с этим рефакторинг.

Вместе с выносом блоков публиковали информацию про них в клубе:
((http://clubs.ya.ru/bem/posts.xml?tag=8486525)).

Работы по выносу блоков в Open Source пока не закончены.

==== Инструменты
Начали реализацию инструментов ((https://github.com/bem/bem-tools bem-tools)),
которые помогают работать с файлами по БЭМ-методу.

Инструменты реализуются на JavaScript под Node.js.

Директории с реализацией блоков стали называть «уровнем переопределения».

Например, на проекте может быть:

 1. публичная библиотека блоков с github
 1. внутренняя библиотека lego
 1. и блоки самого проекта

%%hl xml
bem-bl/
    b-logo/
lego/
    b-logo/
auto/
    blocks/
        b-logo/
%%

На уровне переопределения можно задать другую схему именования папок/файлов, отличную от нашей.

Для этого нужно сконфигурировать уровень:

%%hl xml
.bem/
    level.js
%%

Например, вы можете задать другие разделители между именем блока
и элемента, или не раскладывать всё по директориям, а сделать
плоскую структуру из файлов.

==== Шаблонизатор BEMHTML
После экспериментов с разными шаблонизаторами, был разработан
шаблонизатор BEMHTML.

Этот шаблонизатор

 1. позволяет писать шаблоны в БЭМ-терминах
 1. доопределять их на уровнях переопределения
 1. исполнять эти шаблоны, как на сервере, так и в браузере, поскольку
 шаблоны компилируются в простой и быстрый JavaScript

О BEMHTML есть много информации в клубе на Яру:

 * ((clubs.ya.ru/bem/replies.xml?item_no=898))
 * ((clubs.ya.ru/bem/replies.xml?item_no=899))
 * ((clubs.ya.ru/bem/replies.xml?item_no=1153))
 * ((clubs.ya.ru/bem/replies.xml?item_no=1172))
 * ((clubs.ya.ru/bem/replies.xml?item_no=1391))

=== Резюме
Как вы можете видеть, БЭМ появился не сразу.
У нас был долгий период проб и подбора наиболее подходящего нам варианта.

Но обращаю ваше внимание, что всё это время это был БЭМ.

То, что мы используем сейчас — не единственно верное решение.
Наоборот, вы можете использовать БЭМ на своих проектах в том объёме, в котором он принесёт наибольшую пользу.

БЭМ методология очень гибкая и позволяет вам настраивать её под свои процессы, под свои текущие технологии.
Это способ организации работы над проектом, который позволяет команде работать c единым кодом и говорить на одном языке.

Каждая конкретная команда встраивает его в свой процесс разработки и использует так, как им удобно.

Например, у вас есть проект, в котором вы хотите применить БЭМ для вёрстки и ни для чего более.

Хорошо, мы тоже с этого начинали.

Выбирайте подходящую вам схему...

Например, с префиксами и каскадом.

%%hl xml
.b-block
.b-block .elem
.b-block_size_l
.b-block .elem_size_l
%%

Или задайте класс каждому DOM-узлу и используйте абсолютно-независимые блоки.

%%hl xml
.b-block
.b-block__elem
.b-block_size_l
.b-block__elem_size_l
%%

Или можно убрать префиксы.

%%hl xml
.block
.block__elem
.block_size_l
.block__elem_size_l
%%

И начинайте делать вёрстку на проекте по БЭМ.

О вариантах расположения на файловой системе, ((../filesystem/ читайте отдельно)).

=== Читать дальше
  * ((../definitions/ Определения))
  * ((../filesystem/ Организация файловой системы))
  * История создания

