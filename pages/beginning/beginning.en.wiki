=== What is BEM?
This article describes the theoretical aspects of web-developing for a big company.
Except the theory we certainly have practical things such as libraries and tools.
You can find links to them in the article.

There is plenty of sites developed at Yandex, thousands in fact. The approaches
we use for HTML/CSS markup and for others front end code are in constant evolution.

Projects developed for a big portal and the process of developing for such
usually have a range of specifics.

 * Typical projects ought to be developed fast, but they should also live long\\
   It needs to be able to create a project in a short period of time with an
   architecture which will help to maintain it for a long time.
 * Numerous people work for a project\\
   It has to be able to organize work efficiently for teams either of
   1-2 developers or larger numbers.
 * Team scalability\\
   The adding of new people to a team has to improve its productivity. There needs
   to exist an ability to commit new developers to work and assign them their
   own parts of the project.\\
   To be able to work with the same code for a long time with different members of
   the team, the code has to be well-structured.
 * Code reuse\\
   New projects of an interface element don't have to be written from
   scratch. If there is a similar task done for the company, it needs to maximize
   reuse of the code derived.

We looked for solutions to our problems. And at one point they became
##BEM methodology##.\\
##BEM## means Block, Elemen, Modifier. The meanings of these terms are given further
in the article.

One of the most widespread examples of a methodology in  programming is OOP.
This is a programming paradigm embodied by many languages. The same applies for BEM
methodology. This is a way to describe reality in code, a range of patterns and
a way of thinking about entities whatever programming language is used.\\
Based on this methodology we created some front end developing approaches
and technical solutions which enable us to put out new pages fast and maintain
existing pages easily.

The principles of our code and work process are the following:

=== Unified data domain
Imagine an ordinary site. The same as in a picture.

%%html
<div style="text-align:center">
<img src="images/site.png"/>
</div>
%%

While developing and maintainting a site it is useful to mark out "blocks" of
which the site consists.\\
For example, in this picture there are ##Head##, ##Main Layout## and ##Foot##. The
Head in-turn consists of ##Logo##, ##Search##, ##Auth block## and ##Menu##. The Main
Layout contains ##Page Title## and ##Text Block##.

%%html
<div style="text-align:center">
<img src="images/site-marked.png"/>
</div>
%%

Giving each part of the page has its own name makes it very useful when it comes to
team communication.\\
A manager could ask:
 * to enlarge the ##Head## or
 * to create one more page with a ##Head## without ##Search##

You could ask a JavaScript developer
 * to make ##Auth Block## animated, etc.

That is

==== Block
We call as ##block## an independent entity, a "building block" of a application. A block
can be either simple or complicated (containing other blocks).

**e.g.**\\
Search form block\\

%%html
<div style="text-align:center">
<img src="images/search-block.png"/>
</div>
%%

====Element
An Element is a part of a block that performs a certain function. There's no point
of an element without its block.

**e.g.**\\
An input field and a button are elements of the Search Block

%%html
<div style="text-align:center">
<img src="images/search-block-marked.en.png"/>
</div>
%%

===Facilities of describing pages and templates
Blocks and elements are a page's content. Besides the fact of being on the page,
their arrangement is also important.

Blocks (or elements) can be situated in a special order:

For example, a list of goods in an Internet shop:

%%html
<div style="text-align:center">
<img src="images/goods-list.png"/>
</div>
%%

Or menu items:

%%html
<div style="text-align:center">
<img src="images/menu-items.png"/>
</div>
%%

A block can be included in another:

For example, a ##Head Block## includes other blocks:

%%html
<div style="text-align:center">
<img src="images/head-marked.png"/>
</div>
%%

There has to be a way to describe a page in text to be able to change the
page's content, to add new blocks and to move the blocks within the page.
That requires each block and element to have a key word.

A key word designating a concrete block is called ##block name##.

For example, ##menu## is a key word for ##Menu Block##, or ##head## is a key
work fod a ##Head##.

A key word designating an element is called ##element name##.

For example, each point of a menu is an element ##item## of ##menu## block.

Block name must be unique, it unequivocally designates which block is described.
Only the same blocks can have same block names. In this case we say that one block
is represented on the page 2 (3, 4, ...) times.

An element name must be unique only within the scope of block. An element can be repeated
several times. For example, menu items.

%%html
<div style="text-align:center">
<img src="images/menu-items.png"/>
</div>
%%

It' necessary to place the key words in certain order. Data formats with nesting will do for it.
For example, XML or JSON:

%%hl xml
<b:page>
  <b:head>
    <b:menu>
      ...
    </b:menu>
    <e:column>
      <b:logo/>
    </e:column>
    <e:column>
      <b:search>
        <e:input/>
        <e:button>Search</e:button>
      </b:search>
    </e:column>
    <e:column>
      <b:auth>
        ...
      </b:auth>
    <e:column>
  </b:head>
</b:page>
%%

In this example namespaces ##b## and ##e## separate block nodes from element nodes.

The same in JSON:

%%hl js
{
  block: 'page',
  content: {
    block: 'head',
    content: [
      { block: 'menu', content: ... },
      {
        elem: 'column',
        content: { block: 'logo' }
      },
      {
        elem: 'column',
        content: [
          {
            block: 'search',
            content: [
              { elem: 'input' },
              {
                elem: 'button',
                content: 'Search'
              }
            ]
          }
        ]
      },
      {
        elem: 'column',
        content: {
          block: 'auth',
          content: ...
        }
      }
    ]
  }
}
%%

The examples above show the object model with a nesting for blocks and elements to other blocks.
There is also optional data in the page description.\\
This structure we call ##BEM tree## (on analogy from DOM tree).

Final HTML for a browser comes from BEM tree by applying templates (for example, XSL or Javascript).

If a developer needs to move a block to a different place on the page, it's done by
changing a tree. Templates make the final view themselves.

In our last products we've gone with JSON as a format for describing a page. It turns into
HTML by a JavaScript-based template engine.\\
The links for concrete tools can be found at the end of this article.

=== Block independence

While developing a long-term project there could be a desire to move a block.\\
E.g.

 * to swap ##Logo## and ##Auth Block## or
 * to place ##Menu## under ##Search Block##

%%html
<div style="text-align: center">
<img src="images/head.png"/>
</div>
%%

%%html
<div style="text-align: center">
<img src="images/head-changed.png"/>
</div>
%%

To make this process easier blocks must be ##independent##.

An ##independent## block is implemented so that it can be placed anywhere
on the page. And to be included in another block as well.

====Independent CSS

From block's CSS view point this mean that

 * A block (or an element) must have a unique "name" for which can be written a CSS rule.
   E.g., a class.
 * There mustn't be CSS selectors for tags.
 * Cascade selectors for several blocks should be avoided.

=====Naming for independent CSS classes

One of possible namings for CSS classes satisfying the requirements is the following:

 * CSS class for a block coincide with its ##block name##
%%hl xml
<ul class="menu">
  ...
</ul>
%%
 * CSS class for an element is a ##block name## and an ##element name## divided
 by a symbol (or symbols)
%%hl xml
<ul class="menu">
  <li class="menu__item">
    ...
  </li>
  <li class="menu__item">
    ...
  </li>
</ul>
%%
It is necessary to include a block name in a CSS class for an element to minimize a cascade.

Naming rules for CSS classes can be different.
Read ((http://bem.github.com/bem-bl/pages/naming/naming.eb.wiki here)) about a naming convention
we use.

====Independent templates

From template engine's point of view block independence means that:

 * Blocks and elements must be described in incoming data\\
   A block (or an element) must have a unique "name" for the possibility to tell a template engine
   "The Menu must be placed here".
 * A block can be easily placed in every place in BEM tree

===== Independent templates for blocks
Comingupon the block in the incoming data a template engine must unambiguously transform it into
HTML. Every block must have its template for that.

For example, this can look like this in XSL:
%%hl xml
<xsl:template match="b:menu">
  <ul class="menu">
    <xsl:apply-templates/>
  </ul>
</xsl:template>

<xsl:template match="b:menu/e:item">
  <li class="menu__item">
    <xsl:apply-templates/>
  </li>
<xsl:template>
%%

We gradually reject XSL for our products for our own JavaScript based template engine
((https://github.com/veged/xjst XJST)). This template engine absorbs all that we like in XSL,
but implements it with JavaScript's productivity at either client or server side.\\
We write our templates on domain specific language BEMHTML based on XJST.
((http://clubs.ya.ru/bem/replies.xml?item_no=992 The main ideas of BEMHTML)) are published
in BEM club at Ya.Ru (in Russian).

=== Blocks reiteration
The second ##Menu Block## can occur in the ##Foot block## of a site. Or one ##Text Block##
can turn into two separated by an advertisement.\\
Even if a block was developed as a singular unit, the same one can appear at any moment.

From CSS's viewpoint this means that:
 * CSS id selectors are not used\\
   It is convinient to use CSS classes

From JavaScript's viewpoint this means that:

 * The blocks with similar behaviour can be detected unequivocally: they have the same CSS classes\\
   Using CSS class selectors it is possible to pick out all the same blocks on the page, and to specify
   them the dynamic behaviour wanted.

===Modifiers for elements and blocks
There can be a situation when there needs not only to reiterate a block but also to make slight
changes for it.\\
E.g. there is a task:
 * Create one more ##Menu## in ##Footer## with //another layout//.

%%html
<div style="text-align: center">
<img src="images/site-footer-menu.png"/>
</div>
%%

To avoid developing of a block that is minimally different from the existed one, it needs to use
##modifier##.

A ##modifier## is a block's or element's property which change a litte its view or behaviour.\\
A modifier has a name and a value. You can use several modifiers at the same time.

**e.g.**\\
A block's modifier specifies background color

%%html
<div style="text-align: center">
<img src="images/search-background.png"/>
</div>
%%

**e.g.**\\
An element's modofier for the current item changes its view

%%html
<div style="text-align: center">
<img src="images/menu-current-item.png"/>
</div>
%%

From an input data's point of view:
 * In the BEM tree modifiers are properties of the entity that describes a block or an element

E.g, they are node attributes in XML:

%%hl xml
<b:menu m:size="big" m:type="buttons">
  ...
</b:menu>
%%

The same in JSON:

%%hl js
{
  block: 'menu',
  mods: [
   { size: 'big' },
   { type: 'buttons' }
  ]
}
%%

From the viewpoint of CSS:
 * A modifier is an additional CSS class for a block or an element.

%%hl xml
<ul class="menu menu_size_big menu_type_buttons">
  ...
</ul>
%%

%%hl js
.menu_size_big {
  // CSS code to change height
}
.menu_type_buttons .menu__item {
  // CSS code to change item's view
}
%%

Modifiers for elements are imptemented on analogy.

E.g. a current menu item can be marked with a modifier:

%%hl xml
<b:menu>
  <e:item>Index<e:item>
  <e:item m:state="current">Products</e:item>
  <e:item>Contact<e:item>
</b:menu>
%%

%%hl js
{
  block: 'menu',
  content: [
    { elem: 'item', content: 'Index' },
    {
      elem: 'item',
      mods: { 'state' : 'current' },
      content: 'Products'
    },
    { elem: 'item', content: 'Contact' }
  ]
}
%%

%%hl xml
<div class="menu">
  <ul class="menu__layout">
    <li class="menu__layout-unit">
      <div class="menu__item">Index</div>
    </li>
    <li class="menu__layout-unit">
      <div class="menu__item menu__item_state_current">Products</div>
    </li>
    <li class="menu__layout-unit">
      <div class="menu__item">Contact</div>
    </li>
  </ul>
</div>
%%

%%hl js
.menu__item_state_current {
  font-weight: bold;
}
%%

=== Subject abstraction
If there are many people who work for a project, they should arrange for a data domain. All the bloks
of a project must have definite names used in code.

E.g. a block ##Tag Cloud## is always called ##tags##. Each of its element is a ##tag##. This is right for
every language: CSS, JavaScript, XSL, etc.

From the development process' point of view:
 * All the participants operate with the same terms

From the viewpoint of CSS:
 * CSS for blocks and elements can be written in a pseudo language which then is compiled
   into a pure CSS according to the naming convention.

%%hl js
  .menu {
    __layout {
      display: inline;
    }
    __layout-item {
      display: inline-block;
      ...
    }
    __item {
      _state_current {
        font-weight: bold;
      }
    }
  }
%%

From the JavaScript's point of view:
 * Do not use CSS class selector to get a block's or an elements' DOM object.

%%hl js
$('menu__item').click( ... );
$('menu__item').addClass('menu__item_state_current');
$('menu').toggle('menu_size_big').toggle('menu_size_small');
%%

The naming convention for CSS classes of blocks and elements can be changed. Using special JavaScript
functions for an access to the blocks and the elements and in order to work with their modifiers makes it possible
to change these functions only.

%%hl js
Block('menu').elem('item').click( ... );
Block('menu').elem('item').setMod('state', 'current');
Block('menu').toggleMod('size', 'big', 'small');
%%

The code above is abstract. In our real products we use a JavaScript core of ##i-bem## block
from ##bem-bl## block library:
 ((http://bem.github.com/bem-bl/sets/common-desktop/i-bem/i-bem.ru.html))

=== A block's consistency
A site has a ##Button## block which has its dymanic behaviour.

%%html
<div style="text-align: center">
<img src="images/button.png"/>
</div>
%%

When a cursor hovers on the block, it changes its appearance.

%%html
<div style="text-align: center">
<img src="images/button-cursor.png"/>
</div>
%%

A manager could ask:
 * to use the same button on another page

The CSS implementation of the block is insufficient. In this case to reiterate the block we must
reiterate its behaviour which is described in JavaScript as well.

So a block must "know" everything about itself. That is a block's implementation. This means that
its view and behaviour is realized in all the technologies needed. That we call ##multilengualism##.

##Multilingualism## is a description of a block in all the programming languages which are neccessary for
its functionality.

If a block has to be viewed on a page, it has to have the following techs:
 * templates (XSL, TT2, JavaScript, etc), which turn block's declaration into page's HTML code
 * CSS that describes a block's view

If a block has a dynamic behaviour, we add it to this list:
 * a JavaScript implementation for the block

Everything that concern the block is its technology. E.g.:
 * A block's images

=== File system representation for a block
==== Unequivocal place of code
===== File naming
If a project
 * lives long and it's always acquiring new features

If a  developing team
 * consits of several people
 * grows and changes (new people appear)

All this in turn mean that needs a way to find block's code files fast.

A block's code is easy to find if it's placed in files with the same name as a block key
word is:

%%html
<pre>
menu.xsl
menu.js
menu.css
</pre>
%%

===== File independence of a block
There could be a task
 * to use some blocks from a previous project for a new one

For doing it easily we have to be able to deliver a block's implementation (in all its techs)
to another place. This can be done by file copying or partial checkout of a repo from a 
donor project. In both these cases it is useful if all block's files are gathered in the same
directory:

%%html
<pre>
menu/
  menu.xsl
  menu.js
  menu.css
</pre>
%%

===== File structure of a block
When working on a project there can appear a neccessity to change a block.

A manager could ask:
 * to change a color of a ##Current Menu Point##
or
 * to make a ##Menu## reacting on cursor's hovering

One developer could ask another:
 * to help with ##Search Form## markup for IE

To understand where is the code discussed we have to follow these rules when developing:
 * A block's code is placed in a separate directory
   * The directory's name coincides with the blocks' name
   * The block's technical implementation is placed in the files in block's directory
 * An element has a subdirectory in its block's directory
   * The subdirectory's name coincides with the element's name
   * The technical implementation of an elemnet is placed in the files in this subdirectory
 * A modifier has a subdirectory in its block's directory
   * The subdirectory's name coincides with the modifier's name
   * The technical implementation of the modifier is placed in the files in this subdirectory
   * A file name includes both a key and a value of a modifier

**E.g.**\\
A file structure of a ##Menu## block

%%html
<pre>
menu/
  __item/
    _state/
      menu__item_state_current.css
      menu__item_state_current.xsl
    menu__item.css
    menu__item.xsl
  menu.css
  menu.js
  menu.xsl
</pre>
%%

Maintaining this file structure manually is not convenient. So we use
((https://github.com/bem/bem-tools BEM tools))
to work with files. These are a range of utilities that enable us to create
files with certain names, file place and a content.

===== Grouping blocks in directories
A big portal needs to have the same block in different sites.

There could be a task:
 * to create the same ##Footer## on //all the portal's services// or
 * to create a //new project// using the blocks for existing ones

Developing for a web design company, often means that onr has to use typical solutions
for typical web pages.

A manager could ask:
 * to create an order page with a web form //as on previous project//

We have to do these tasks and avoid to copy blocks' files from project to project. There needs be
an opportunity to link up the blocks from one project to another. Blocks have to be united in
one directory for that.

We call such a directory ##blocks##.

**E.g.**

%%html
<pre>
blocks/
  foot/
  head/
  menu/
  page/
  search/
</pre>
%%

That directory can be linked up to another project straight from a repo. So a block's code is kept
in one place. If we need to correct something or to make other changes, we do it in one
place only.

==== Levels of defenition
If a group of blocks (united in one directory) is linked up to a project directly (via a partial checkout
or svn:externals), then every changing commited for these blocks influences to both projects.

When developing a site based on another existing one it may need:
 * to enlarge a font in ##Head## on a site (without affecting the previous site),
 * to add an animation when showing a dropdown menu.

Then there is a need to define or redefine blocks in different technologies for
one site only or for certain pages only. It is owed to ##defining levels##.

A ##defining level## is a set of blocks' implementations grouped in one directory.

%%html
<div style="text-align:center;">
<img src="images/levels-schema.png"/>
</div>
%%

An implementation of every block from a library can be expanded (or redefined) at a project's level.

%%html
<div style="text-align:center;">
<img src="images/block-levels.png"/>
</div>
%%

From the viewpoint of the process of building a page:
 * When building a page we can set a list of levels (directories) to use their blocks on
   the page. E.g.,
   ##build-page -l blocks-common -l blocks-my my-page.html##

From the file structure's poitn of view:
 * A project can have any number of levels. But only the levels that are enumerated when builing
   will be on the page. It is possibly to make different sets of defining levels
   for different parts of the site.

From the JavaScript's point of view:
 * There is need to define a dynamic behaviour of a page in a declarative style.
   Final behaviour has to be gathered from different defining levels. E.g.,

%%hl js
/* blocks-common/dropdown/dropdown.js */
Block('dropdown', {
  init: function() {
    ...
  }
});

/* blocks-my/dropdown/dropdown.js */
Block('dropdown', {
  init: function() {
    this.__base();
    ...
  }
});
%%

From the viewpoint of a template engine:
 * To be able not only to define but to redefine a template one needs to
   apply previous implementation for a template.\\
   E.g., for XSL:

%%hl xml
<xsl:template match="b:head">
  <div> <!-- Node for extra design -->
    <xsl:apply-imports/>
  </div>
</xsl:template>
%%

From a project architechture's point of view:
 * When developing a portal of several sites we can sort out a blocks library which is one of
   defining levels for all the sites of the portal. And the blocks for a concrete site
   can be united in another level.
 * The same repo can have blocks of both desktop and mobile browsers.\\
   Such a project has defining levels of common blocks, mobile blocks and desktop blocks.
   Different combinations of these levels give the implementation needed on concrete
   pages.


((https://github.com/bem/bem-bl Open source block library bem-bl)) can be an example of
having several defining levels in one repo.

=== Building a page
Working in terms of blocks means that there exists ##subject abstraction##. This is obligatory only when
a programmer work with code. When code gets to a browser subject abstraction is
not neccessary. It is important only to save a design and behaviour of every block on the page.

So, there is a ##code for people## and a ##code for browsers##. They are not the same one.
 * A programmer writes a code for blocks, a browser gets a code for the whole page

To turn a ##code fo people##  into ##code for a browser## we ##build## a page.

##Building a page## is making a page's code in different technologies (HTML, CSS, JavaScript)
based on a page declaration (XML or JSON) by applying implementations of the blocks declared

From the CSS' point of view:

 * The block files are gathered in one page file\\
   Despite the fact that CSS for every block, element or modifier is placed in a separate
   file, there is no need to link up these files to the page as is. It is possible to
   collect all the CSS implementation needed in one file.\\
   In addition that solves the problem of limitation for CSS imports in IE and descreases
   the number of HTTP requests.
   We use the ((https://github.com/veged/borschik borschik)) tool to unite all CSS in one
   file.
 * A browser gets minimized code\\
   When building we can minimize and optimize a CSS code. E.g. using the
   ((https://github.com/afelix/csso CSSO)) utility.
 * Each browser can get a CSS code written especially for it\\
   There is a possibility to divide CSS implementations for different browsers and deliver
   only the code needed for each browser.\\
   A ((https://github.com/afelix/setochka setochka, a prototype)) can be used for that.

From the JavaScript's point of view:
 * There are many files for blocks, and there is one file for a page\\
   The same as in the CSS' case, a JavaScript implementation of all the blocks
   needed can be united in one file.

From the template engine's point of view:
 * Only needed templates work\\
   A final set of templates that is used for creating an HTML for a page has only the templates
   for the blocks required. Because of that a template productivity increases and the probability
   of appearing side effects is diminished.

From the viewpoint of developing process:
 * Robots serve for people (not counterwise)\\
   A developer writes a code in an easy way. "Robots" take care of the productivity by optimizing the
   code (and probably making it unreadable) when building a page.

From the viewpoint of labor organization
 * Division of labour\\
   There are developers to create blocks. And there are developers to optimize the final product.

We use ((https://github.com/bem/bem-tools BEM tools)) to build pages.

== Related links
==== Libraries
 * ((http://bem.github.com/bem-bl/index.en.html An open source block library bem-bl))
==== Tools
 * ((https://github.com/bem/bem-tools Tools for working with files accroding to BEM methodology))
 * ((https://github.com/veged/borschik Borschik))\\
   An utility to build static files into one.
 * ((https://github.com/afelix/setochka Setochka, a prototype))\\
   A tool to divide CSS in several browser-oriented files.
 * ((https://github.com/afelix/csso CSSO))\\
   A utility that optimizes a CSS code with a glance of its structure.
==== Supplement information
 * ((http://clubs.ya.ru/bem/posts.xml?tag=64664080 Presentations and workshops video)) (russian speaking)
 * ((http://clubs.ya.ru/bem/ BEM club at Ya.Ru)) (russian speaking)
